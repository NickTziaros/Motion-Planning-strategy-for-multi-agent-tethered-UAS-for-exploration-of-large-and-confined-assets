[  9%] Built target visualization_node
[ 18%] Built target markers_node
[ 27%] Built target tf_to_pos_node
[ 36%] Built target isaac_sim_demo_library
[ 54%] Built target spawn_scene
[ 54%] Built target StateSubscriber_node
[ 63%] Built target moveit_test_node
[ 72%] Built target cartesian
[ 77%] [32mBuilding CXX object CMakeFiles/joint_space.dir/src/joint_space.cpp.o[0m
[ 95%] Built target ompl_lifecycle
[ 95%] Built target ompl_controller_node
[01m[K/home/ubuntu/ros2_ws/src/isaac_sim_demo/src/joint_space.cpp:[m[K In lambda function:
[01m[K/home/ubuntu/ros2_ws/src/isaac_sim_demo/src/joint_space.cpp:197:41:[m[K [01;31m[Kerror: [m[Kno matching function for call to â€˜[01m[Kplanning_scene::PlanningScene::isStateColliding(moveit::core::RobotState*&, const char [7], bool)[m[Kâ€™
  197 |     if ([01;31m[Kplanning_scene->isStateColliding(robot_state,"Group1",true)[m[K){
      |         [01;31m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~[m[K
In file included from [01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_request_adapter/planning_request_adapter.h:41[m[K,
                 from [01m[K/home/ubuntu/ros2_ws/install/moveit_ros_planning/include/moveit/planning_pipeline/planning_pipeline.h:40[m[K,
                 from [01m[K/home/ubuntu/ros2_ws/src/isaac_sim_demo/src/joint_space.cpp:8[m[K:
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:307:8:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kbool planning_scene::PlanningScene::isStateColliding(const string&, bool)[m[Kâ€™
  307 |   bool [01;36m[KisStateColliding[m[K(const std::string& group = "", bool verbose = false);
      |        [01;36m[K^~~~~~~~~~~~~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:307:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:312:8:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kbool planning_scene::PlanningScene::isStateColliding(const string&, bool) const[m[Kâ€™
  312 |   bool [01;36m[KisStateColliding[m[K(const std::string& group = "", bool verbose = false) const
      |        [01;36m[K^~~~~~~~~~~~~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:312:8:[m[K [01;36m[Knote: [m[K  candidate expects 2 arguments, 3 provided
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:321:8:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kbool planning_scene::PlanningScene::isStateColliding(moveit::core::RobotState&, const string&, bool) const[m[Kâ€™
  321 |   bool [01;36m[KisStateColliding[m[K(moveit::core::RobotState& state, const std::string& group = "", bool verbose = false) const
      |        [01;36m[K^~~~~~~~~~~~~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:321:51:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kmoveit::core::RobotState*[m[Kâ€™ to â€˜[01m[Kmoveit::core::RobotState&[m[Kâ€™
  321 |   bool isStateColliding([01;36m[Kmoveit::core::RobotState& state[m[K, const std::string& group = "", bool verbose = false) const
      |                         [01;36m[K~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:330:8:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kbool planning_scene::PlanningScene::isStateColliding(const moveit::core::RobotState&, const string&, bool) const[m[Kâ€™
  330 |   bool [01;36m[KisStateColliding[m[K(const moveit::core::RobotState& state, const std::string& group = "",
      |        [01;36m[K^~~~~~~~~~~~~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:330:57:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kmoveit::core::RobotState*[m[Kâ€™ to â€˜[01m[Kconst moveit::core::RobotState&[m[Kâ€™
  330 |   bool isStateColliding([01;36m[Kconst moveit::core::RobotState& state[m[K, const std::string& group = "",
      |                         [01;36m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:335:8:[m[K [01;36m[Knote: [m[Kcandidate: â€˜[01m[Kbool planning_scene::PlanningScene::isStateColliding(const RobotState&, const string&, bool) const[m[Kâ€™
  335 |   bool [01;36m[KisStateColliding[m[K(const moveit_msgs::msg::RobotState& state, const std::string& group = "",
      |        [01;36m[K^~~~~~~~~~~~~~~~[m[K
[01m[K/home/ubuntu/ros2_ws/install/moveit_core/include/moveit/planning_scene/planning_scene.h:335:61:[m[K [01;36m[Knote: [m[K  no known conversion for argument 1 from â€˜[01m[Kmoveit::core::RobotState*[m[Kâ€™ to â€˜[01m[Kconst RobotState&[m[Kâ€™ {aka â€˜[01m[Kconst moveit_msgs::msg::RobotState_<std::allocator<void> >&[m[Kâ€™}
  335 |   bool isStateColliding([01;36m[Kconst moveit_msgs::msg::RobotState& state[m[K, const std::string& group = "",
      |                         [01;36m[K~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~[m[K
gmake[2]: *** [CMakeFiles/joint_space.dir/build.make:76: CMakeFiles/joint_space.dir/src/joint_space.cpp.o] Error 1
gmake[1]: *** [CMakeFiles/Makefile2:339: CMakeFiles/joint_space.dir/all] Error 2
gmake: *** [Makefile:146: all] Error 2
